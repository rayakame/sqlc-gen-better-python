# Code generated by sqlc. DO NOT EDIT.
# versions:
#   sqlc v1.28.0
#   sqlc-gen-better-python v0.3.0
from __future__ import annotations

__all__: typing.Sequence[str] = (
    "GetEmbeddedTestPostgresTypeRow",
    "GetStudentAndScoreRow",
    "GetStudentAndScoresRow",
    "create_one_test_postgres_inner_type",
    "create_one_test_postgres_type",
    "delete_author",
    "get_embedded_test_postgres_type",
    "get_many_test_bytea_postgres_type",
    "get_many_test_postgres_type",
    "get_many_test_timestamp_postgres_type",
    "get_one_datetime",
    "get_one_test_bytea_postgres_type",
    "get_one_test_postgres_type",
    "get_one_test_timestamp_postgres_type",
    "get_student_and_score",
    "get_student_and_scores",
    "list_authors",
    "list_authors2",
    "list_datetime",
    "update_author",
)

import datetime
import decimal
import msgspec
import typing
import uuid

import asyncpg

from test import models


class GetEmbeddedTestPostgresTypeRow(msgspec.Struct):
    test_postgres_type: models.TestPostgresType = msgspec.field()
    test_inner_postgres_type: models.TestInnerPostgresType = msgspec.field()


class GetStudentAndScoreRow(msgspec.Struct):
    student: models.Student = msgspec.field()
    test_score: models.TestScore = msgspec.field()


class GetStudentAndScoresRow(msgspec.Struct):
    student: models.Student = msgspec.field()
    test_score: models.TestScore = msgspec.field()


CREATE_ONE_TEST_POSTGRES_INNER_TYPE: typing.Final[str] = """-- name: CreateOneTestPostgresInnerType :exec
INSERT INTO test_inner_postgres_types (
    table_id,
    serial_test,
    serial4_test,
    bigserial_test,
    smallserial_test,
    int_test,
    bigint_test,
    smallint_test,
    float_test,
    double_precision_test,
    real_test,
    numeric_test,
    money_test,
    bool_test,
    json_test,
    jsonb_test,
    bytea_test,
    date_test,
    time_test,
    timetz_test,
    timestamp_test,
    timestamptz_test,
    interval_test,
    text_test,
    varchar_test,
    bpchar_test,
    char_test,
    citext_test,
    uuid_test,
    inet_test,
    cidr_test,
    macaddr_test,
    macaddr8_test,
    ltree_test,
    lquery_test,
    ltxtquery_test
) VALUES (
             $1,  $2,  $3,  $4,  $5,  $6,  $7,  $8,
             $9, $10, $11, $12, $13, $14, $15, $16,
             $17, $18, $19, $20, $21, $22, $23, $24,
             $25, $26, $27, $28, $29, $30, $31, $32,
             $33, $34, $35, $36
         )
"""

CREATE_ONE_TEST_POSTGRES_TYPE: typing.Final[str] = """-- name: CreateOneTestPostgresType :exec
INSERT INTO test_postgres_types (
    id,
    serial_test,
    serial4_test,
    bigserial_test,
    smallserial_test,
    int_test,
    bigint_test,
    smallint_test,
    float_test,
    double_precision_test,
    real_test,
    numeric_test,
    money_test,
    bool_test,
    json_test,
    jsonb_test,
    bytea_test,
    date_test,
    time_test,
    timetz_test,
    timestamp_test,
    timestamptz_test,
    interval_test,
    text_test,
    varchar_test,
    bpchar_test,
    char_test,
    citext_test,
    uuid_test,
    inet_test,
    cidr_test,
    macaddr_test,
    macaddr8_test,
    ltree_test,
    lquery_test,
    ltxtquery_test
) VALUES (
             $1,  $2,  $3,  $4,  $5,  $6,  $7,  $8,
             $9, $10, $11, $12, $13, $14, $15, $16,
             $17, $18, $19, $20, $21, $22, $23, $24,
             $25, $26, $27, $28, $29, $30, $31, $32,
             $33, $34, $35, $36
         )
"""

DELETE_AUTHOR: typing.Final[str] = """-- name: DeleteAuthor :exec
DELETE
FROM authors
WHERE id = $1
"""

GET_EMBEDDED_TEST_POSTGRES_TYPE: typing.Final[str] = """-- name: GetEmbeddedTestPostgresType :one
SELECT test_postgres_types.id, test_postgres_types.serial_test, test_postgres_types.serial4_test, test_postgres_types.bigserial_test, test_postgres_types.smallserial_test, test_postgres_types.int_test, test_postgres_types.bigint_test, test_postgres_types.smallint_test, test_postgres_types.float_test, test_postgres_types.double_precision_test, test_postgres_types.real_test, test_postgres_types.numeric_test, test_postgres_types.money_test, test_postgres_types.bool_test, test_postgres_types.json_test, test_postgres_types.jsonb_test, test_postgres_types.bytea_test, test_postgres_types.date_test, test_postgres_types.time_test, test_postgres_types.timetz_test, test_postgres_types.timestamp_test, test_postgres_types.timestamptz_test, test_postgres_types.interval_test, test_postgres_types.text_test, test_postgres_types.varchar_test, test_postgres_types.bpchar_test, test_postgres_types.char_test, test_postgres_types.citext_test, test_postgres_types.uuid_test, test_postgres_types.inet_test, test_postgres_types.cidr_test, test_postgres_types.macaddr_test, test_postgres_types.macaddr8_test, test_postgres_types.ltree_test, test_postgres_types.lquery_test, test_postgres_types.ltxtquery_test, test_inner_postgres_types.table_id, test_inner_postgres_types.serial_test, test_inner_postgres_types.serial4_test, test_inner_postgres_types.bigserial_test, test_inner_postgres_types.smallserial_test, test_inner_postgres_types.int_test, test_inner_postgres_types.bigint_test, test_inner_postgres_types.smallint_test, test_inner_postgres_types.float_test, test_inner_postgres_types.double_precision_test, test_inner_postgres_types.real_test, test_inner_postgres_types.numeric_test, test_inner_postgres_types.money_test, test_inner_postgres_types.bool_test, test_inner_postgres_types.json_test, test_inner_postgres_types.jsonb_test, test_inner_postgres_types.bytea_test, test_inner_postgres_types.date_test, test_inner_postgres_types.time_test, test_inner_postgres_types.timetz_test, test_inner_postgres_types.timestamp_test, test_inner_postgres_types.timestamptz_test, test_inner_postgres_types.interval_test, test_inner_postgres_types.text_test, test_inner_postgres_types.varchar_test, test_inner_postgres_types.bpchar_test, test_inner_postgres_types.char_test, test_inner_postgres_types.citext_test, test_inner_postgres_types.uuid_test, test_inner_postgres_types.inet_test, test_inner_postgres_types.cidr_test, test_inner_postgres_types.macaddr_test, test_inner_postgres_types.macaddr8_test, test_inner_postgres_types.ltree_test, test_inner_postgres_types.lquery_test, test_inner_postgres_types.ltxtquery_test
FROM test_postgres_types
         JOIN test_inner_postgres_types ON test_inner_postgres_types.table_id = test_postgres_types.id
    LIMIT 1
"""

GET_MANY_TEST_BYTEA_POSTGRES_TYPE: typing.Final[str] = """-- name: GetManyTestByteaPostgresType :many
SELECT bytea_test
FROM test_postgres_types
         LIMIT 2
"""

GET_MANY_TEST_POSTGRES_TYPE: typing.Final[str] = """-- name: GetManyTestPostgresType :many
SELECT id, serial_test, serial4_test, bigserial_test, smallserial_test, int_test, bigint_test, smallint_test, float_test, double_precision_test, real_test, numeric_test, money_test, bool_test, json_test, jsonb_test, bytea_test, date_test, time_test, timetz_test, timestamp_test, timestamptz_test, interval_test, text_test, varchar_test, bpchar_test, char_test, citext_test, uuid_test, inet_test, cidr_test, macaddr_test, macaddr8_test, ltree_test, lquery_test, ltxtquery_test
FROM test_postgres_types
         LIMIT 2
"""

GET_MANY_TEST_TIMESTAMP_POSTGRES_TYPE: typing.Final[str] = """-- name: GetManyTestTimestampPostgresType :many
SELECT timestamp_test
FROM test_postgres_types
         LIMIT 2
"""

GET_ONE_DATETIME: typing.Final[str] = """-- name: GetOneDatetime :one
SELECT datetime_test.hi
FROM datetime_test
LIMIT 1
"""

GET_ONE_TEST_BYTEA_POSTGRES_TYPE: typing.Final[str] = """-- name: GetOneTestByteaPostgresType :one
SELECT bytea_test
FROM test_postgres_types
         LIMIT 1
"""

GET_ONE_TEST_POSTGRES_TYPE: typing.Final[str] = """-- name: GetOneTestPostgresType :one
SELECT id, serial_test, serial4_test, bigserial_test, smallserial_test, int_test, bigint_test, smallint_test, float_test, double_precision_test, real_test, numeric_test, money_test, bool_test, json_test, jsonb_test, bytea_test, date_test, time_test, timetz_test, timestamp_test, timestamptz_test, interval_test, text_test, varchar_test, bpchar_test, char_test, citext_test, uuid_test, inet_test, cidr_test, macaddr_test, macaddr8_test, ltree_test, lquery_test, ltxtquery_test
FROM test_postgres_types
         LIMIT 1
"""

GET_ONE_TEST_TIMESTAMP_POSTGRES_TYPE: typing.Final[str] = """-- name: GetOneTestTimestampPostgresType :one
SELECT timestamp_test
FROM test_postgres_types
         LIMIT 1
"""

GET_STUDENT_AND_SCORE: typing.Final[str] = """-- name: GetStudentAndScore :one
SELECT students.id, students.name, students.age, test_scores.student_id, test_scores.score, test_scores.grade
FROM students
         JOIN test_scores ON test_scores.student_id = students.id
WHERE students.id = $1
"""

GET_STUDENT_AND_SCORES: typing.Final[str] = """-- name: GetStudentAndScores :many
SELECT students.id, students.name, students.age, test_scores.student_id, test_scores.score, test_scores.grade
FROM students
         JOIN test_scores ON test_scores.student_id = students.id
"""

LIST_AUTHORS: typing.Final[str] = """-- name: ListAuthors :many
SELECT authors.id
FROM authors
WHERE id IN ($1)
ORDER BY name
"""

LIST_AUTHORS2: typing.Final[str] = """-- name: ListAuthors2 :many
SELECT authors.id
FROM authors
WHERE id = $1
ORDER BY name
"""

LIST_DATETIME: typing.Final[str] = """-- name: ListDatetime :many
SELECT datetime_test.hi
FROM datetime_test
"""

UPDATE_AUTHOR: typing.Final[str] = """-- name: UpdateAuthor :exec
UPDATE authors
set name = $1,
    bio  = $2
WHERE id = $3
"""


async def create_one_test_postgres_inner_type(conn: asyncpg.Connection[asyncpg.Record], *, table_id: int, serial_test: int, serial4_test: int, bigserial_test: int, smallserial_test: int, int_test: int, bigint_test: int, smallint_test: int, float_test: float, double_precision_test: float, real_test: float, numeric_test: decimal.Decimal, money_test: str, bool_test: bool, json_test: str, jsonb_test: str, bytea_test: memoryview, date_test: datetime.date, time_test: datetime.time, timetz_test: datetime.time, timestamp_test: datetime.datetime, timestamptz_test: datetime.datetime, interval_test: datetime.timedelta, text_test: str, varchar_test: str, bpchar_test: str, char_test: str, citext_test: str, uuid_test: uuid.UUID, inet_test: str, cidr_test: str, macaddr_test: str, macaddr8_test: str, ltree_test: str, lquery_test: str, ltxtquery_test: str) -> None:
    await conn.execute(CREATE_ONE_TEST_POSTGRES_INNER_TYPE, table_id, serial_test, serial4_test, bigserial_test, smallserial_test, int_test, bigint_test, smallint_test, float_test, double_precision_test, real_test, numeric_test, money_test, bool_test, json_test, jsonb_test, bytea_test, date_test, time_test, timetz_test, timestamp_test, timestamptz_test, interval_test, text_test, varchar_test, bpchar_test, char_test, citext_test, uuid_test, inet_test, cidr_test, macaddr_test, macaddr8_test, ltree_test, lquery_test, ltxtquery_test)


async def create_one_test_postgres_type(conn: asyncpg.Connection[asyncpg.Record], *, id: int, serial_test: int, serial4_test: int, bigserial_test: int, smallserial_test: int, int_test: int, bigint_test: int, smallint_test: int, float_test: float, double_precision_test: float, real_test: float, numeric_test: decimal.Decimal, money_test: str, bool_test: bool, json_test: str, jsonb_test: str, bytea_test: memoryview, date_test: datetime.date, time_test: datetime.time, timetz_test: datetime.time, timestamp_test: datetime.datetime, timestamptz_test: datetime.datetime, interval_test: datetime.timedelta, text_test: str, varchar_test: str, bpchar_test: str, char_test: str, citext_test: str, uuid_test: uuid.UUID, inet_test: str, cidr_test: str, macaddr_test: str, macaddr8_test: str, ltree_test: str, lquery_test: str, ltxtquery_test: str) -> None:
    await conn.execute(CREATE_ONE_TEST_POSTGRES_TYPE, id, serial_test, serial4_test, bigserial_test, smallserial_test, int_test, bigint_test, smallint_test, float_test, double_precision_test, real_test, numeric_test, money_test, bool_test, json_test, jsonb_test, bytea_test, date_test, time_test, timetz_test, timestamp_test, timestamptz_test, interval_test, text_test, varchar_test, bpchar_test, char_test, citext_test, uuid_test, inet_test, cidr_test, macaddr_test, macaddr8_test, ltree_test, lquery_test, ltxtquery_test)


async def delete_author(conn: asyncpg.Connection[asyncpg.Record], *, id: int) -> None:
    await conn.execute(DELETE_AUTHOR, id)


async def get_embedded_test_postgres_type(conn: asyncpg.Connection[asyncpg.Record]) -> typing.Optional[GetEmbeddedTestPostgresTypeRow]:
    row = await conn.fetchrow(GET_EMBEDDED_TEST_POSTGRES_TYPE)
    if row is None:
        return None
    return GetEmbeddedTestPostgresTypeRow(
        test_postgres_type=models.TestPostgresType(id=row[0], serial_test=row[1], serial4_test=row[2], bigserial_test=row[3], smallserial_test=row[4], int_test=row[5], bigint_test=row[6], smallint_test=row[7], float_test=row[8], double_precision_test=row[9], real_test=row[10], numeric_test=row[11], money_test=row[12], bool_test=row[13], json_test=row[14], jsonb_test=row[15], bytea_test=memoryview(row[16]), date_test=row[17], time_test=row[18], timetz_test=row[19], timestamp_test=row[20], timestamptz_test=row[21], interval_test=row[22], text_test=row[23], varchar_test=row[24], bpchar_test=row[25], char_test=row[26], citext_test=row[27], uuid_test=row[28], inet_test=str(row[29]), cidr_test=str(row[30]), macaddr_test=row[31], macaddr8_test=row[32], ltree_test=row[33], lquery_test=row[34], ltxtquery_test=row[35]),
        test_inner_postgres_type=models.TestInnerPostgresType(table_id=row[36], serial_test=row[37], serial4_test=row[38], bigserial_test=row[39], smallserial_test=row[40], int_test=row[41], bigint_test=row[42], smallint_test=row[43], float_test=row[44], double_precision_test=row[45], real_test=row[46], numeric_test=row[47], money_test=row[48], bool_test=row[49], json_test=row[50], jsonb_test=row[51], bytea_test=memoryview(row[52]), date_test=row[53], time_test=row[54], timetz_test=row[55], timestamp_test=row[56], timestamptz_test=row[57], interval_test=row[58], text_test=row[59], varchar_test=row[60], bpchar_test=row[61], char_test=row[62], citext_test=row[63], uuid_test=row[64], inet_test=str(row[65]), cidr_test=str(row[66]), macaddr_test=row[67], macaddr8_test=row[68], ltree_test=row[69], lquery_test=row[70], ltxtquery_test=row[71]))


async def get_many_test_bytea_postgres_type(conn: asyncpg.Connection[asyncpg.Record]) -> typing.Sequence[memoryview]:
    rows = await conn.fetch(GET_MANY_TEST_BYTEA_POSTGRES_TYPE)
    return_rows: typing.List[memoryview] = []
    for row in rows:
        return_rows.append(memoryview(row[0]))
    return return_rows


async def get_many_test_postgres_type(conn: asyncpg.Connection[asyncpg.Record]) -> typing.Sequence[models.TestPostgresType]:
    rows = await conn.fetch(GET_MANY_TEST_POSTGRES_TYPE)
    return_rows: typing.List[models.TestPostgresType] = []
    for row in rows:
        return_rows.append(models.TestPostgresType(id=row[0], serial_test=row[1], serial4_test=row[2], bigserial_test=row[3], smallserial_test=row[4], int_test=row[5], bigint_test=row[6], smallint_test=row[7], float_test=row[8], double_precision_test=row[9], real_test=row[10], numeric_test=row[11], money_test=row[12], bool_test=row[13], json_test=row[14], jsonb_test=row[15], bytea_test=row[16], date_test=row[17], time_test=row[18], timetz_test=row[19], timestamp_test=row[20], timestamptz_test=row[21], interval_test=row[22], text_test=row[23], varchar_test=row[24], bpchar_test=row[25], char_test=row[26], citext_test=row[27], uuid_test=row[28], inet_test=row[29], cidr_test=row[30], macaddr_test=row[31], macaddr8_test=row[32], ltree_test=row[33], lquery_test=row[34], ltxtquery_test=row[35]))
    return return_rows


async def get_many_test_timestamp_postgres_type(conn: asyncpg.Connection[asyncpg.Record]) -> typing.Sequence[datetime.datetime]:
    rows = await conn.fetch(GET_MANY_TEST_TIMESTAMP_POSTGRES_TYPE)
    return_rows: typing.List[datetime.datetime] = []
    for row in rows:
        return_rows.append(row[0])
    return return_rows


async def get_one_datetime(conn: asyncpg.Connection[asyncpg.Record]) -> typing.Optional[datetime.datetime]:
    row = await conn.fetchrow(GET_ONE_DATETIME)
    if row is None:
        return None
    return row[0]


async def get_one_test_bytea_postgres_type(conn: asyncpg.Connection[asyncpg.Record]) -> typing.Optional[memoryview]:
    row = await conn.fetchrow(GET_ONE_TEST_BYTEA_POSTGRES_TYPE)
    if row is None:
        return None
    return memoryview(row[0])


async def get_one_test_postgres_type(conn: asyncpg.Connection[asyncpg.Record]) -> typing.Optional[models.TestPostgresType]:
    row = await conn.fetchrow(GET_ONE_TEST_POSTGRES_TYPE)
    if row is None:
        return None
    return models.TestPostgresType(id=row[0], serial_test=row[1], serial4_test=row[2], bigserial_test=row[3], smallserial_test=row[4], int_test=row[5], bigint_test=row[6], smallint_test=row[7], float_test=row[8], double_precision_test=row[9], real_test=row[10], numeric_test=row[11], money_test=row[12], bool_test=row[13], json_test=row[14], jsonb_test=row[15], bytea_test=memoryview(row[16]), date_test=row[17], time_test=row[18], timetz_test=row[19], timestamp_test=row[20], timestamptz_test=row[21], interval_test=row[22], text_test=row[23], varchar_test=row[24], bpchar_test=row[25], char_test=row[26], citext_test=row[27], uuid_test=row[28], inet_test=str(row[29]), cidr_test=str(row[30]), macaddr_test=row[31], macaddr8_test=row[32], ltree_test=row[33], lquery_test=row[34], ltxtquery_test=row[35])


async def get_one_test_timestamp_postgres_type(conn: asyncpg.Connection[asyncpg.Record]) -> typing.Optional[datetime.datetime]:
    row = await conn.fetchrow(GET_ONE_TEST_TIMESTAMP_POSTGRES_TYPE)
    if row is None:
        return None
    return row[0]


async def get_student_and_score(conn: asyncpg.Connection[asyncpg.Record], *, id: int) -> typing.Optional[GetStudentAndScoreRow]:
    row = await conn.fetchrow(GET_STUDENT_AND_SCORE, id)
    if row is None:
        return None
    return GetStudentAndScoreRow(student=models.Student(id=row[0], name=row[1], age=row[2]), test_score=models.TestScore(student_id=row[3], score=row[4], grade=row[5]))


async def get_student_and_scores(conn: asyncpg.Connection[asyncpg.Record]) -> typing.Sequence[GetStudentAndScoresRow]:
    rows = await conn.fetch(GET_STUDENT_AND_SCORES)
    return_rows: typing.List[GetStudentAndScoresRow] = []
    for row in rows:
        return_rows.append(GetStudentAndScoresRow(student=models.Student(id=row[0], name=row[1], age=row[2]), test_score=models.TestScore(student_id=row[3], score=row[4], grade=row[5])))
    return return_rows


async def list_authors(conn: asyncpg.Connection[asyncpg.Record], *, ids: typing.Sequence[int]) -> typing.Sequence[int]:
    rows = await conn.fetch(LIST_AUTHORS, ids)
    return_rows: typing.List[int] = []
    for row in rows:
        return_rows.append(row[0])
    return return_rows


async def list_authors2(conn: asyncpg.Connection[asyncpg.Record], *, id: int) -> typing.Sequence[int]:
    rows = await conn.fetch(LIST_AUTHORS2, id)
    return_rows: typing.List[int] = []
    for row in rows:
        return_rows.append(row[0])
    return return_rows


async def list_datetime(conn: asyncpg.Connection[asyncpg.Record]) -> typing.Sequence[datetime.datetime]:
    rows = await conn.fetch(LIST_DATETIME)
    return_rows: typing.List[datetime.datetime] = []
    for row in rows:
        return_rows.append(row[0])
    return return_rows


async def update_author(conn: asyncpg.Connection[asyncpg.Record], *, name: str, bio: str, id: int) -> None:
    await conn.execute(UPDATE_AUTHOR, name, bio, id)

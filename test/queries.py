# Code generated by sqlc. DO NOT EDIT.
# versions:
#   sqlc v1.28.0
#   sqlc-gen-better-python v0.2.0
from __future__ import annotations

__all__: typing.Sequence[str] = (
    "GetStudentAndScoreRow",
    "GetStudentAndScoresRow",
    "Queries",
)

import msgspec
import typing

import asyncpg

from test import models


class GetStudentAndScoreRow(msgspec.Struct):
    student: models.Student = msgspec.field()
    test_score: models.TestScore = msgspec.field()


class GetStudentAndScoresRow(msgspec.Struct):
    student: models.Student = msgspec.field()
    test_score: models.TestScore = msgspec.field()


DELETE_AUTHOR: typing.Final[str] = """-- name: DeleteAuthor :exec
DELETE
FROM authors
WHERE id = $1
"""

GET_STUDENT_AND_SCORE: typing.Final[str] = """-- name: GetStudentAndScore :one
SELECT students.id, students.name, students.age, test_scores.student_id, test_scores.score, test_scores.grade
FROM students
         JOIN test_scores ON test_scores.student_id = students.id
WHERE students.id = $1
"""

GET_STUDENT_AND_SCORES: typing.Final[str] = """-- name: GetStudentAndScores :many
SELECT students.id, students.name, students.age, test_scores.student_id, test_scores.score, test_scores.grade
FROM students
         JOIN test_scores ON test_scores.student_id = students.id
"""

LIST_AUTHORS: typing.Final[str] = """-- name: ListAuthors :many
SELECT authors.id
FROM authors
WHERE id IN ($1)
ORDER BY name
"""

LIST_AUTHORS2: typing.Final[str] = """-- name: ListAuthors2 :many
SELECT authors.id
FROM authors
WHERE id = $1
ORDER BY name
"""

UPDATE_AUTHOR: typing.Final[str] = """-- name: UpdateAuthor :exec
UPDATE authors
set name = $1,
    bio  = $2
WHERE id = $3
"""


class Queries:
    __slots__ = ("_conn",)

    def __init__(self, conn: asyncpg.Connection):
        self._conn = conn

    async def delete_author(self, *, id: int) -> None:
        await self._conn.execute(DELETE_AUTHOR, id)

    async def get_student_and_score(self, *, id: int) -> typing.Optional[GetStudentAndScoreRow]:
        row = await self._conn.fetchrow(GET_STUDENT_AND_SCORE, id)
        if row is None:
            return None
        return GetStudentAndScoreRow(student=models.Student(id=row[0], name=row[1], age=row[2]), test_score=models.TestScore(student_id=row[3], score=row[4], grade=row[5]))

    async def get_student_and_scores(self) -> typing.Sequence[GetStudentAndScoresRow]:
        rows = await self._conn.fetch(GET_STUDENT_AND_SCORES)
        return_rows: typing.List[GetStudentAndScoresRow] = []
        for row in rows:
            return_rows.append(GetStudentAndScoresRow(student=models.Student(id=row[0], name=row[1], age=row[2]), test_score=models.TestScore(student_id=row[3], score=row[4], grade=row[5])))
        return return_rows

    async def list_authors(self, *, ids: typing.Sequence[int]) -> typing.Sequence[int]:
        rows = await self._conn.fetch(LIST_AUTHORS, ids)
        return_rows: typing.List[int] = []
        for row in rows:
            return_rows.append(int(row[0]))
        return return_rows

    async def list_authors2(self, *, id: int) -> typing.Sequence[int]:
        rows = await self._conn.fetch(LIST_AUTHORS2, id)
        return_rows: typing.List[int] = []
        for row in rows:
            return_rows.append(int(row[0]))
        return return_rows

    async def update_author(self, *, name: str, bio: str, id: int) -> None:
        await self._conn.execute(UPDATE_AUTHOR, name, bio, id)

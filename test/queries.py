# Code generated by sqlc. DO NOT EDIT.
# versions:
#   sqlc v1.28.0
#   sqlc-gen-better-python v0.3.1
from __future__ import annotations

__all__: typing.Sequence[str] = (
    "GetEmbeddedTestPostgresType1Row",
    "GetEmbeddedTestPostgresType2Row",
    "GetEmbeddedTestPostgresType3Row",
    "GetEmbeddedTestPostgresType4Row",
    "get_embedded_test_postgres_type1",
    "get_embedded_test_postgres_type2",
    "get_embedded_test_postgres_type3",
    "get_embedded_test_postgres_type4",
)

import msgspec
import typing

import asyncpg

from test import models


class GetEmbeddedTestPostgresType1Row(msgspec.Struct):
    id: int = msgspec.field()
    serial_test: int = msgspec.field()
    table_id: int = msgspec.field()
    bool_test: bool = msgspec.field()
    test_inner_postgres_type: models.TestInnerPostgresType = msgspec.field()


class GetEmbeddedTestPostgresType2Row(msgspec.Struct):
    id: int = msgspec.field()
    serial_test: int = msgspec.field()
    test_inner_postgres_type: models.TestInnerPostgresType = msgspec.field()
    bool_test: bool = msgspec.field()


class GetEmbeddedTestPostgresType3Row(msgspec.Struct):
    id: int = msgspec.field()
    serial_test: int = msgspec.field()
    test_inner_postgres_type: models.TestInnerPostgresType = msgspec.field()
    bool_test: bool = msgspec.field()


class GetEmbeddedTestPostgresType4Row(msgspec.Struct):
    test_postgres_type: models.TestPostgresType = msgspec.field()
    test_inner_postgres_type: models.TestInnerPostgresType = msgspec.field()
    bool_test: bool = msgspec.field()


GET_EMBEDDED_TEST_POSTGRES_TYPE1: typing.Final[str] = """-- name: GetEmbeddedTestPostgresType1 :one
SELECT id, serial_test, table_id, bool_test, test_inner_postgres_types.table_id, test_inner_postgres_types.bool_test
FROM test_postgres_types
         JOIN test_inner_postgres_types ON test_inner_postgres_types.table_id = test_postgres_types.id
    LIMIT 1
"""

GET_EMBEDDED_TEST_POSTGRES_TYPE2: typing.Final[str] = """-- name: GetEmbeddedTestPostgresType2 :one
SELECT test_postgres_types.id, test_postgres_types.serial_test, test_inner_postgres_types.table_id, test_inner_postgres_types.bool_test, test_inner_postgres_types.bool_test
FROM test_postgres_types
         JOIN test_inner_postgres_types ON test_inner_postgres_types.table_id = test_postgres_types.id
    LIMIT 1
"""

GET_EMBEDDED_TEST_POSTGRES_TYPE3: typing.Final[str] = """-- name: GetEmbeddedTestPostgresType3 :one
SELECT test_postgres_types.id, test_postgres_types.serial_test, test_inner_postgres_types.table_id, test_inner_postgres_types.bool_test, test_inner_postgres_types.bool_test
FROM test_postgres_types
         JOIN test_inner_postgres_types ON test_inner_postgres_types.table_id = test_postgres_types.id
    LIMIT 1
"""

GET_EMBEDDED_TEST_POSTGRES_TYPE4: typing.Final[str] = """-- name: GetEmbeddedTestPostgresType4 :one
SELECT test_postgres_types.id, test_postgres_types.serial_test, test_inner_postgres_types.table_id, test_inner_postgres_types.bool_test, test_inner_postgres_types.bool_test
FROM test_postgres_types
         JOIN test_inner_postgres_types ON test_inner_postgres_types.table_id = test_postgres_types.id
    LIMIT 1
"""


async def get_embedded_test_postgres_type1(conn: asyncpg.Connection[asyncpg.Record]) -> typing.Optional[GetEmbeddedTestPostgresType1Row]:
    row = await conn.fetchrow(GET_EMBEDDED_TEST_POSTGRES_TYPE1)
    if row is None:
        return None
    return GetEmbeddedTestPostgresType1Row(id=row[0], serial_test=row[1], table_id=row[2], bool_test=row[3], test_inner_postgres_type=models.TestInnerPostgresType(table_id=row[4], bool_test=row[5]))


async def get_embedded_test_postgres_type2(conn: asyncpg.Connection[asyncpg.Record]) -> typing.Optional[GetEmbeddedTestPostgresType2Row]:
    row = await conn.fetchrow(GET_EMBEDDED_TEST_POSTGRES_TYPE2)
    if row is None:
        return None
    return GetEmbeddedTestPostgresType2Row(id=row[0], serial_test=row[1], test_inner_postgres_type=models.TestInnerPostgresType(table_id=row[2], bool_test=row[3]), bool_test=row[4])


async def get_embedded_test_postgres_type3(conn: asyncpg.Connection[asyncpg.Record]) -> typing.Optional[GetEmbeddedTestPostgresType3Row]:
    row = await conn.fetchrow(GET_EMBEDDED_TEST_POSTGRES_TYPE3)
    if row is None:
        return None
    return GetEmbeddedTestPostgresType3Row(id=row[0], serial_test=row[1], test_inner_postgres_type=models.TestInnerPostgresType(table_id=row[2], bool_test=row[3]), bool_test=row[4])


async def get_embedded_test_postgres_type4(conn: asyncpg.Connection[asyncpg.Record]) -> typing.Optional[GetEmbeddedTestPostgresType4Row]:
    row = await conn.fetchrow(GET_EMBEDDED_TEST_POSTGRES_TYPE4)
    if row is None:
        return None
    return GetEmbeddedTestPostgresType4Row(test_postgres_type=models.TestPostgresType(id=row[0], serial_test=row[1]), test_inner_postgres_type=models.TestInnerPostgresType(table_id=row[2], bool_test=row[3]), bool_test=row[4])
